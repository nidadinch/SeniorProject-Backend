// Code generated by MockGen. DO NOT EDIT.
// Source: repository/animal_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "seniorproject-backend/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIAnimal is a mock of IAnimal interface.
type MockIAnimal struct {
	ctrl     *gomock.Controller
	recorder *MockIAnimalMockRecorder
}

// MockIAnimalMockRecorder is the mock recorder for MockIAnimal.
type MockIAnimalMockRecorder struct {
	mock *MockIAnimal
}

// NewMockIAnimal creates a new mock instance.
func NewMockIAnimal(ctrl *gomock.Controller) *MockIAnimal {
	mock := &MockIAnimal{ctrl: ctrl}
	mock.recorder = &MockIAnimalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAnimal) EXPECT() *MockIAnimalMockRecorder {
	return m.recorder
}

// GetActionableOptions mocks base method.
func (m *MockIAnimal) GetActionableOptions(id string) []*model.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionableOptions", id)
	ret0, _ := ret[0].([]*model.Option)
	return ret0
}

// GetActionableOptions indicates an expected call of GetActionableOptions.
func (mr *MockIAnimalMockRecorder) GetActionableOptions(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionableOptions", reflect.TypeOf((*MockIAnimal)(nil).GetActionableOptions), id)
}

// GetActionableType mocks base method.
func (m *MockIAnimal) GetActionableType(id string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionableType", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetActionableType indicates an expected call of GetActionableType.
func (mr *MockIAnimalMockRecorder) GetActionableType(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionableType", reflect.TypeOf((*MockIAnimal)(nil).GetActionableType), id)
}

// GetAnimals mocks base method.
func (m *MockIAnimal) GetAnimals() ([]*model.Animal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimals")
	ret0, _ := ret[0].([]*model.Animal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimals indicates an expected call of GetAnimals.
func (mr *MockIAnimalMockRecorder) GetAnimals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimals", reflect.TypeOf((*MockIAnimal)(nil).GetAnimals))
}

// GetQuestionActionable mocks base method.
func (m *MockIAnimal) GetQuestionActionable(id string) (*model.QuestionActionable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionActionable", id)
	ret0, _ := ret[0].(*model.QuestionActionable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionActionable indicates an expected call of GetQuestionActionable.
func (mr *MockIAnimalMockRecorder) GetQuestionActionable(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionActionable", reflect.TypeOf((*MockIAnimal)(nil).GetQuestionActionable), id)
}

// GetResultActionable mocks base method.
func (m *MockIAnimal) GetResultActionable(id string) (*model.ResultActionable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResultActionable", id)
	ret0, _ := ret[0].(*model.ResultActionable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResultActionable indicates an expected call of GetResultActionable.
func (mr *MockIAnimalMockRecorder) GetResultActionable(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResultActionable", reflect.TypeOf((*MockIAnimal)(nil).GetResultActionable), id)
}

// GetSymptoms mocks base method.
func (m *MockIAnimal) GetSymptoms(animalId string) ([]*model.Symptom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSymptoms", animalId)
	ret0, _ := ret[0].([]*model.Symptom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymptoms indicates an expected call of GetSymptoms.
func (mr *MockIAnimalMockRecorder) GetSymptoms(animalId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymptoms", reflect.TypeOf((*MockIAnimal)(nil).GetSymptoms), animalId)
}
