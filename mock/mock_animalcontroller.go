// Code generated by MockGen. DO NOT EDIT.
// Source: controller/animal_controller.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAnimalController is a mock of IAnimalController interface.
type MockIAnimalController struct {
	ctrl     *gomock.Controller
	recorder *MockIAnimalControllerMockRecorder
}

// MockIAnimalControllerMockRecorder is the mock recorder for MockIAnimalController.
type MockIAnimalControllerMockRecorder struct {
	mock *MockIAnimalController
}

// NewMockIAnimalController creates a new mock instance.
func NewMockIAnimalController(ctrl *gomock.Controller) *MockIAnimalController {
	mock := &MockIAnimalController{ctrl: ctrl}
	mock.recorder = &MockIAnimalControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAnimalController) EXPECT() *MockIAnimalControllerMockRecorder {
	return m.recorder
}

// GetActionable mocks base method.
func (m *MockIAnimalController) GetActionable(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetActionable", w, r)
}

// GetActionable indicates an expected call of GetActionable.
func (mr *MockIAnimalControllerMockRecorder) GetActionable(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionable", reflect.TypeOf((*MockIAnimalController)(nil).GetActionable), w, r)
}

// GetAnimals mocks base method.
func (m *MockIAnimalController) GetAnimals(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAnimals", w, r)
}

// GetAnimals indicates an expected call of GetAnimals.
func (mr *MockIAnimalControllerMockRecorder) GetAnimals(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimals", reflect.TypeOf((*MockIAnimalController)(nil).GetAnimals), w, r)
}

// GetSymptoms mocks base method.
func (m *MockIAnimalController) GetSymptoms(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetSymptoms", w, r)
}

// GetSymptoms indicates an expected call of GetSymptoms.
func (mr *MockIAnimalControllerMockRecorder) GetSymptoms(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymptoms", reflect.TypeOf((*MockIAnimalController)(nil).GetSymptoms), w, r)
}
