// Code generated by MockGen. DO NOT EDIT.
// Source: service/animal_service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "seniorproject-backend/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIAnimalService is a mock of IAnimalService interface.
type MockIAnimalService struct {
	ctrl     *gomock.Controller
	recorder *MockIAnimalServiceMockRecorder
}

// MockIAnimalServiceMockRecorder is the mock recorder for MockIAnimalService.
type MockIAnimalServiceMockRecorder struct {
	mock *MockIAnimalService
}

// NewMockIAnimalService creates a new mock instance.
func NewMockIAnimalService(ctrl *gomock.Controller) *MockIAnimalService {
	mock := &MockIAnimalService{ctrl: ctrl}
	mock.recorder = &MockIAnimalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAnimalService) EXPECT() *MockIAnimalServiceMockRecorder {
	return m.recorder
}

// ActionableQuestion mocks base method.
func (m *MockIAnimalService) ActionableQuestion(id string) (*model.QuestionActionable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionableQuestion", id)
	ret0, _ := ret[0].(*model.QuestionActionable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionableQuestion indicates an expected call of ActionableQuestion.
func (mr *MockIAnimalServiceMockRecorder) ActionableQuestion(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionableQuestion", reflect.TypeOf((*MockIAnimalService)(nil).ActionableQuestion), id)
}

// ActionableResult mocks base method.
func (m *MockIAnimalService) ActionableResult(id string) (*model.ResultActionable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionableResult", id)
	ret0, _ := ret[0].(*model.ResultActionable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionableResult indicates an expected call of ActionableResult.
func (mr *MockIAnimalServiceMockRecorder) ActionableResult(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionableResult", reflect.TypeOf((*MockIAnimalService)(nil).ActionableResult), id)
}

// Animals mocks base method.
func (m *MockIAnimalService) Animals() (*model.AnimalsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Animals")
	ret0, _ := ret[0].(*model.AnimalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Animals indicates an expected call of Animals.
func (mr *MockIAnimalServiceMockRecorder) Animals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Animals", reflect.TypeOf((*MockIAnimalService)(nil).Animals))
}

// GetActionable mocks base method.
func (m *MockIAnimalService) GetActionable(id string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionable", id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionable indicates an expected call of GetActionable.
func (mr *MockIAnimalServiceMockRecorder) GetActionable(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionable", reflect.TypeOf((*MockIAnimalService)(nil).GetActionable), id)
}

// Symptoms mocks base method.
func (m *MockIAnimalService) Symptoms(animalId string) (*model.SymptomsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Symptoms", animalId)
	ret0, _ := ret[0].(*model.SymptomsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Symptoms indicates an expected call of Symptoms.
func (mr *MockIAnimalServiceMockRecorder) Symptoms(animalId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Symptoms", reflect.TypeOf((*MockIAnimalService)(nil).Symptoms), animalId)
}
